*.c
*.o
*.so
*.pyc
*.pyd
*.exp
*.obj
*.lib
*.log
*.patch
*.prof
*.rdb
*.xml
*.key
*.key_secret

.benchmarks*
.coverage*
.cache/
.env/
.git/
.idea/
.ipynb_checkpoints
.mypy_cache/
.profile/
.pytest_cache/
.python-version
.ruff_cache/

__pycache__
_build/
build/
data_catalog/
dist/
env/
log/
logs/
secrets/
*temp/
*target/
venv*/
*test-ledger/
.venv/

.DS_Store
.null-ls*
PERF.JSON
output.json
*dask-worker-space*

docs/**/*.ipynb
examples/backtest/notebooks/catalog
nautilus_trader/**/.gitignore
nautilus_trader/test_kit/mocks/.nautilus/
tests/test_data/catalog/
bench_data/

!tests/integration_tests/adapters/betfair/responses/*.log

############
# Terraform
############
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Node
node_modules/
