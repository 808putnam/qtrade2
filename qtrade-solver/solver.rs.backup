//! This module provides convex optimization solver runs.
//!
//! The functionality includes:
//! - Setting up and configuring the solver
//! - Running optimization tasks
//! - Handling solver results
//!
//! This module abstracts the complexities of convex optimization and provides
//! a simple interface for performing optimization tasks.

use anyhow::Result;
use opentelemetry::global;
use opentelemetry::trace::Tracer;
use qtrade_solver;
use qtrade_shared_types::ArbitrageResult;
use std::sync::Arc;
use std::time::Duration;
use tokio::time::sleep;
use tokio::sync::mpsc;
use tracing::{error, info};
use qtrade_lander;

// Note: The run_solver() functionality has been migrated to the qtrade_solver crate.
// This file is kept for reference and will be removed in a future cleanup.
//
// The implementation below has been commented out and the original function is now
// available via qtrade_solver::run_solver().

// const SOLVER: &str = "solver";
// const CHECK_INTERVAL: Duration = Duration::from_secs(60);

// Global channel for passing arbitrage results from solver to lander is now in qtrade_solver
/*
lazy_static! {
    pub static ref ARBITRAGE_SENDER: tokio::sync::Mutex<mpsc::Sender<ArbitrageResult>> = {
        let (tx, rx) = mpsc::channel::<ArbitrageResult>(100);

        // Store receiver somewhere accessible to lander
        // Now we use the qtrade-lander crate instead of local lander module
        qtrade_lander::init_arbitrage_receiver(rx);


        // Wrap the sender in a Mutex for thread-safe access
        tokio::sync::Mutex::new(tx)
    };
}
*/

/*
/// Periodically performs convex optimization tasks.
///
/// This function sets up a timer to periodically:
/// - Read the pool reserves cache
/// - Read the oracle cache
/// - Call appropriate DEX module APIs for quotes based on reserves
/// - Determine arbitrage opportunities
/// - Output results to the lander queue
pub async fn run_solver() -> Result<()> {
    let tracer = global::tracer(QTRADE_RUNTIME_TRACER_NAME);

    loop {
        let span_name = format!("{}::run_solver", SOLVER);

        let result: Result<(), anyhow::Error> = tracer.in_span(span_name, |_cx| async move {
            // Read pool reserves cache
            info!("Reading pool reserves cache...");

            // Get a reference to the PoolCache instance (clone the Arc)
            let pool_cache = Arc::clone(&POOL_CACHE);
            // Now we can call the method on the PoolCache instance
            let pool_entries = pool_cache.get_all_entries_as_slice().await;
            info!("Retrieved {} pool entries from cache", pool_entries.len());

            // Call appropriate DEX module APIs for quotes based on reserves
            info!("Calling DEX module APIs for quotes based on reserves...");

            // Determine arbitrage opportunities
            info!("Determining arbitrage opportunities...");

            // Convert PoolCacheState entries to the format expected by qtrade_solver
            let solver_entries: Vec<_> = pool_entries
                .iter()
                .map(|(pubkey, state)| {
                    (*pubkey, Box::new(state.clone()) as Box<dyn std::any::Any + Send + Sync>)
                })
                .collect();

            match qtrade_solver::solve(&solver_entries) {
                Ok(result) => {
                    info!("Arbitrage opportunities determined successfully with status: {}", result.status);

                    // Output results to lander queue
                    info!("Sending arbitrage results to lander queue...");

                    // Acquire the mutex lock to access the sender
                    let sender = ARBITRAGE_SENDER.lock().await;
                    if let Err(e) = sender.send(result).await {
                        error!("Failed to send arbitrage result to lander: {:?}", e);
                    } else {
                        info!("Successfully sent arbitrage result to lander queue");
                    }
                },
                Err(e) => {
                    error!("Failed to determine arbitrage opportunities: {:?}", e);
                }
            }

            // Output completion message
            info!("Arbitrage processing cycle complete");

            Ok(())
        }).await;

        // result
        if let Err(e) = result {
            error!("Error running solver: {:?}", e);
        }

        // Wait for specified duration before running the check again
        sleep(CHECK_INTERVAL).await;
    }
}
*/
