//! This module contains setup and maintenance for a defined set of wallets.
//!
//! The functionality includes:
//! - Initializing and configuring wallets
//! - Managing the set of wallets
//! - Providing utilities for wallet operations
//!
//! This module abstracts the complexities of wallet management and provides
//! a simple interface for interacting with multiple wallets.

use anyhow::Result;
use opentelemetry::global;
use opentelemetry::trace::Tracer;
use serde_json::from_slice;
use solana_sdk::signer::keypair::Keypair;
use std::env;
use std::time::Duration;
use tokio::time::sleep;
use tracing::{info, error};

// For help in naming spans
use crate::QTRADE_RUNTIME_TRACER_NAME;

const WALLETS: &str = "wallets";
const CHECK_INTERVAL: Duration = Duration::from_secs(60);


/// Reads a `Keypair` from an environment variable
pub fn read_keypair_from_env(var_name: &str) -> Result<Keypair> {
    let tracer = global::tracer(QTRADE_RUNTIME_TRACER_NAME);
    let span_name = format!("{}::read_keypair_from_env", WALLETS);

    let result = tracer.in_span(span_name, move |_cx| {
        let keypair_json = env::var(var_name)?;
        let keypair_bytes = keypair_json.as_bytes();
        let keypair_vec: Vec<u8> = from_slice(keypair_bytes)?;
        let keypair = Keypair::from_bytes(&keypair_vec)?;
        Ok(keypair)
    });

    result
}

/// Initialize the tiered wallet system with the wallet configuration.
///
/// This function initializes our three-tier wallet system:
/// - HODL keys (cold storage)
/// - Bank keys (funding wallets)
/// - Explorer keys (transaction signing wallets)
async fn initialize_wallet_system(wallet_config_path: &str) -> Result<()> {
    let tracer = global::tracer(QTRADE_RUNTIME_TRACER_NAME);
    let span_name = format!("{}::initialize_wallet_system", WALLETS);

    tracer.in_span(span_name, |_cx| async move {
        info!("Initializing tiered wallet system from config at {}", wallet_config_path);

        // Load any wallet configuration from file
        // TODO: Implement loading keys from configuration file

        // For now, we'll rely on environment variables for keys
        // Initialize the key manager with environment-provided keys
        if let Err(e) = qtrade_wallets::init() {
            error!("Failed to initialize wallet system: {:?}", e);
            return Err(anyhow::anyhow!("Failed to initialize wallet system: {:?}", e));
        }

        info!("Tiered wallet system initialized successfully");

        Ok(())
    }).await
}

/// Periodically manages wallet balances based on a timer.
///
/// This function sets up a timer to periodically check and manage
/// the balances of the defined set of wallets. It ensures that
/// wallet balances are maintained and any necessary actions are taken.
pub async fn run_wallets(wallet_config_path: &str) -> Result<()> {
    let tracer = global::tracer(QTRADE_RUNTIME_TRACER_NAME);

    // First, initialize the wallet system
    initialize_wallet_system(wallet_config_path).await?;

    loop {
        let span_name = format!("{}::run_wallets", WALLETS);

        let result: Result<(), anyhow::Error> = tracer.in_span(span_name, |_cx| async move {
            // Periodically check and manage wallet balances
            info!("Checking and managing wallet balances...");

            // Call the balancer to:
            // 1. Clean up used explorer keys and recover funds
            // 2. Fund bank keys from HODL keys if needed
            // 3. Create new explorer keys if needed
            if let Err(e) = qtrade_wallets::balancer().await {
                error!("Error in wallet balancer: {:?}", e);
            }

            Ok(())
        }).await;

        // result
        if let Err(e) = result {
            error!("Error running wallet management: {:?}", e);
        }

        // Wait for specified duration before running the check again
        sleep(CHECK_INTERVAL).await;
    }
}
